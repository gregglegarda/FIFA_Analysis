<<<<<<< HEAD
knitr::opts_chunk$set(include = F)
options(scientific=T, digits = 3)
install.packages("car")
library(car)
hist(gk$Potential,main="Histogram for goalkeepers' potential ratings", xlab="rating", col="orange")
hist(gk$Potential,main="Histogram for goalkeepers' potential ratings", xlab="rating", col="orange")
gk<- subset(data,Position=="GK")
library(readr)
data <- read_csv("Desktop/Data Science/Intro to Data Science/Project/Project 2/data.csv")
data <- read.csv("data.csv", check.names = FALSE, stringsAsFactors = FALSE)
library(stringr)
numextract <- function(string){str_extract(string, "\\-*\\d+\\.*\\d*")}
#Weight
data$Weight <- as.integer(numextract(data$Weight))
#Height
install.packages("gsubfn")
library(gsubfn)
data$Height <- as.numeric(gsubfn("(\\d)'(\\d+)", ~ as.numeric(x) * 30.48 +
as.numeric(y) * 2.54, sub('"', '', data$Height)))
data$Height <- as.integer(data$Height)
gk<- subset(data,Position=="GK")
gk <- gk[,colSums(is.na(gk))<nrow(gk)]
gk
install.packages("car")
library(car)
hist(gk$Potential,main="Histogram for goalkeepers' potential ratings", xlab="rating", col="orange")
qqnorm(gk$Potential, main = "GK's potential ratings Q-Q plot", ylab="rating quantiles", col=c("#ff0000","#00ff00","#0000ff","#ffff00"))
qqline(gk$Potential)
scatterplot(gk$Age, gk$Overall, col = "red", xlab = "Age", ylab = "Current Rating",main = "Age and Current Rating")
scatterplot(gk$Age, gk$Potential, col = "dark green", xlab = "Age", ylab = "Potential Rating",main = "Age and Potential Rating")
install.packages("car")
knitr::opts_chunk$set(include = F)
options(scientific=T, digits = 3)
hist(gk$Potential,main="Histogram for goalkeepers' potential ratings", xlab="rating", col="orange")
qqnorm(gk$Potential, main = "GK's potential ratings Q-Q plot", ylab="rating quantiles", col=c("#ff0000","#00ff00","#0000ff","#ffff00"))
qqline(gk$Potential)
scatterplot(gk$Age, gk$Overall, col = "red", xlab = "Age", ylab = "Current Rating",main = "Age and Current Rating")
install.packages("car")
library(car)
scatterplot(gk$Age, gk$Overall, col = "red", xlab = "Age", ylab = "Current Rating",main = "Age and Current Rating")
scatterplot(gk$Age, gk$Potential, col = "dark green", xlab = "Age", ylab = "Potential Rating",main = "Age and Potential Rating")
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
summary(fit1)
vif(fit1)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
gk<- subset(data,Position=="GK")
gk <- gk[,colSums(is.na(gk))<nrow(gk)]
gk
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = "gk")
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes )
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
fit1 <-lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
knitr::opts_chunk$set(echo = TRUE)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
knitr::opts_chunk$set(include = F)
options(scientific=T, digits = 3)
library(stringr)
numextract <- function(string){str_extract(string, "\\-*\\d+\\.*\\d*")}
#Weight
data$Weight <- as.integer(numextract(data$Weight))
#Height
install.packages("gsubfn")
library(gsubfn)
data$Height <- as.numeric(gsubfn("(\\d)'(\\d+)", ~ as.numeric(x) * 30.48 +
as.numeric(y) * 2.54, sub('"', '', data$Height)))
data$Height <- as.integer(data$Height)
gk<- subset(data,Position=="GK")
gk <- gk[,colSums(is.na(gk))<nrow(gk)]
gk
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
library(stringr)
gk<- subset(data,Position=="GK")
gk <- gk[,colSums(is.na(gk))<nrow(gk)]
gk
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
knitr::opts_chunk$set(include = F)
options(scientific=T, digits = 3)
# can add quietly=T option to the require() function
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
library(readr)
fifa <- read_csv("data.csv")
str(fifa)
library(dplyr)
library(ggplot2)
library(maps)
overall_fifa <- fifa %>%
group_by(Nationality) %>%
summarise(Count = n(),
Avg_Overall = mean(Overall),
Avg_Potential = mean(Potential),
Avg_Pot_Diff = mean(Potential-Overall))
worldmap = map_data("world")
merged_fifa <- merge(x = worldmap, y = overall_fifa, by.x = "region", by.y = "Nationality", all.x = TRUE) %>% arrange(order)
ggplot(data = merged_fifa, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = Count)) +
labs(fill='Number of players')
overall_fifa <- fifa %>%
group_by(Nationality) %>%
summarise(Count = n(),
Avg_Overall = mean(Overall),
Avg_Potential = mean(Potential),
Avg_Pot_Diff = mean(Potential-Overall)) %>%
filter(Count > 45)
ggplot(data = merged_fifa, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = Avg_Overall)) +
labs(fill='Average skill')
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
plot(fit1, col=c("#ff0000","#00ff00","#0000ff","#ffff00"))
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data=gk)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data=gk)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data=gk)
knitr::opts_chunk$set(include = F)
options(scientific=T, digits = 3)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data=gk)
gk <- gk[,colSums(is.na(gk))<nrow(gk)]
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data=gk)
gk<- subset(data,Position=="GK")
gk <- gk[,colSums(is.na(gk))<nrow(gk)]
gk
install.packages("car")
library(car)
View(gk)
knitr::opts_chunk$set(echo = TRUE)
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
=======
<<<<<<< HEAD
install.packages("gsubfn")
=======
mse <- function(reg) mean(reg$residuals^2)
mse
#Train PCR on test data, then test
#set.seed(2)
#train = sample(1:nrow(fifa), nrow(fifa)/2)
#test = (-train)
#fifa.test = fifa[test]
#PCR model
#pcr.model <- pcr(Penalties ~ ., data = fifa[train,], scale =TRUE, validation = "CV")
#pcr.pred <- predict(pcr.model, data=fifa.test, ncomp = 6)
library(pls)
#PCR on training data using CV
smp_size <- floor(0.80 *nrow(fifa))
set.seed(2)
train_ind <- sample(seq_len(nrow(fifa)), size=smp_size)
fifa.train <- fifa[train_ind, ]
fifa.test <- fifa[-train_ind,]
y.test <- fifa.test[,1]
pcr.fit = pcr(Penalties ~., data=fifa.train, scale=TRUE, validation="CV")
summary(pcr.fit)
#plot validation
validationplot(pcr.fit, val.type="MSEP")
#plot coefficients
coefplot(pcr.fit)
#calculate MSE
pcr.pred <- predict(pcr.fit, fifa.test, ncomp = 6)
mean((pcr.pred - y.test)^2)
#addlinear reg for mse
reg <- lm(Penalties ~., data=fifa)
mse <- mean(reg$residuals^2)
mse
#Train PCR on test data, then test
#set.seed(2)
#train = sample(1:nrow(fifa), nrow(fifa)/2)
#test = (-train)
#fifa.test = fifa[test]
#PCR model
#pcr.model <- pcr(Penalties ~ ., data = fifa[train,], scale =TRUE, validation = "CV")
#pcr.pred <- predict(pcr.model, data=fifa.test, ncomp = 6)
library(pls)
#PCR on training data using CV
smp_size <- floor(0.80 *nrow(fifa))
set.seed(2)
train_ind <- sample(seq_len(nrow(fifa)), size=smp_size)
fifa.train <- fifa[train_ind, ]
fifa.test <- fifa[-train_ind,]
y.test <- fifa.test[,1]
pcr.fit = pcr(Penalties ~., data=fifa.train, scale=TRUE, validation="CV")
summary(pcr.fit)
#plot validation
validationplot(pcr.fit, val.type="MSEP")
#plot coefficients
coefplot(pcr.fit)
#calculate MSE
pcr.pred <- predict(pcr.fit, fifa.test, ncomp = 6)
mean((pcr.pred - y.test)^2)
#addlinear reg for mse
reg <- lm(Penalties ~., data=fifa)
mse <- mean(reg$residuals^2)
mse
#fit model
pcr.fit2 <- pcr(Penalties ~.,scale=TRUE, ncomp=6)
library(pls)
#PCR on training data using CV
smp_size <- floor(0.80 *nrow(fifa))
set.seed(2)
train_ind <- sample(seq_len(nrow(fifa)), size=smp_size)
fifa.train <- fifa[train_ind, ]
fifa.test <- fifa[-train_ind,]
y.test <- fifa.test[,1]
pcr.fit = pcr(Penalties ~., data=fifa.train, scale=TRUE, validation="CV")
summary(pcr.fit)
#plot validation
validationplot(pcr.fit, val.type="MSEP")
#plot coefficients
coefplot(pcr.fit)
#calculate MSE
pcr.pred <- predict(pcr.fit, fifa.test, ncomp = 6)
mean((pcr.pred - y.test)^2)
#addlinear reg for mse
reg <- lm(Penalties ~., data=fifa)
mse <- mean(reg$residuals^2)
mse
#fit model
pcr.fit2 <- pcr(Penalties ~.,data=fifa, scale=TRUE, ncomp=6)
summary(pcr.fit2)
#Train PCR on test data, then test
#set.seed(2)
#train = sample(1:nrow(fifa), nrow(fifa)/2)
#test = (-train)
#fifa.test = fifa[test]
#PCR model
#pcr.model <- pcr(Penalties ~ ., data = fifa[train,], scale =TRUE, validation = "CV")
#pcr.pred <- predict(pcr.model, data=fifa.test, ncomp = 6)
library(pls)
#PCR on training data using CV
smp_size <- floor(0.80 *nrow(fifa))
set.seed(2)
train_ind <- sample(seq_len(nrow(fifa)), size=smp_size)
fifa.train <- fifa[train_ind, ]
fifa.test <- fifa[-train_ind,]
y.test <- fifa.test[,1]
pcr.fit = pcr(Penalties ~., data=fifa.train, scale=TRUE, validation="CV")
summary(pcr.fit)
#plot validation
validationplot(pcr.fit, val.type="MSEP")
#plot coefficients
coefplot(pcr.fit)
#calculate MSE
pcr.pred <- predict(pcr.fit, fifa.test, ncomp = 6)
mean((pcr.pred - y.test)^2)
#addlinear reg for mse
reg <- lm(Penalties ~., data=fifa)
mse <- mean(reg$residuals^2)
mse
#fit model
#pcr.fit2 <- pcr(Penalties ~.,data=fifa, scale=TRUE, ncomp=6)
#summary(pcr.fit2)
#show predicted values vs observed
library(pls)
#PCR on training data using CV
smp_size <- floor(0.80 *nrow(fifa))
set.seed(2)
train_ind <- sample(seq_len(nrow(fifa)), size=smp_size)
fifa.train <- fifa[train_ind, ]
fifa.test <- fifa[-train_ind,]
y.test <- fifa.test[,1]
pcr.fit = pcr(Penalties ~., data=fifa.train, scale=TRUE, validation="CV")
summary(pcr.fit)
#plot validation
validationplot(pcr.fit, val.type="MSEP")
#plot coefficients
coefplot(pcr.fit)
#calculate MSE
pcr.pred <- predict(pcr.fit, fifa.test, ncomp = 6)
mean((pcr.pred - y.test)^2)
#addlinear reg for mse
reg <- lm(Penalties ~., data=fifa)
summary(reg)
mse <- mean(reg$residuals^2)
mse
#fit model
#pcr.fit2 <- pcr(Penalties ~.,data=fifa, scale=TRUE, ncomp=6)
#summary(pcr.fit2)
#show predicted values vs observed
library(pls)
#PCR on training data using CV
smp_size <- floor(0.80 *nrow(fifa))
set.seed(2)
train_ind <- sample(seq_len(nrow(fifa)), size=smp_size)
fifa.train <- fifa[train_ind, ]
fifa.test <- fifa[-train_ind,]
y.test <- fifa.test[,1]
pcr.fit = pcr(Penalties ~., data=fifa.train, scale=TRUE, validation="CV")
summary(pcr.fit)
#plot validation
validationplot(pcr.fit, val.type="R2")
#plot coefficients
coefplot(pcr.fit)
#calculate MSE
pcr.pred <- predict(pcr.fit, fifa.test, ncomp = 6)
mean((pcr.pred - y.test)^2)
#addlinear reg for mse
reg <- lm(Penalties ~., data=fifa)
summary(reg)
mse <- mean(reg$residuals^2)
mse
#fit model
#pcr.fit2 <- pcr(Penalties ~.,data=fifa, scale=TRUE, ncomp=6)
#summary(pcr.fit2)
#show predicted values vs observed
library(pls)
#PCR on training data using CV
smp_size <- floor(0.80 *nrow(fifa))
set.seed(2)
train_ind <- sample(seq_len(nrow(fifa)), size=smp_size)
fifa.train <- fifa[train_ind, ]
fifa.test <- fifa[-train_ind,]
y.test <- fifa.test[,1]
pcr.fit = pcr(Penalties ~., data=fifa.train, scale=TRUE, validation="CV")
summary(pcr.fit)
#plot validation
validationplot(pcr.fit, val.type="MSEP")
#plot coefficients
coefplot(pcr.fit)
#calculate MSE
pcr.pred <- predict(pcr.fit, fifa.test, ncomp = 6)
mean((pcr.pred - y.test)^2)
#addlinear reg for mse
reg <- lm(Penalties ~., data=fifa)
summary(reg)
mse <- mean(reg$residuals^2)
mse
#fit model
pcr.fit2 <- pcr(Penalties ~.,data=fifa, scale=TRUE, ncomp=6)
summary(pcr.fit2)
#show predicted values vs observed
predplot(pcr.fit2)
library(corrplot)
barcolors = c("green", "violet", "orange", "blue", "pink", "red", "yellow", "cyan")
#subset data
fifacols <- c("Penalties", "Aggression","Age", "Stamina","ShotPower","Balance", "BallControl","LongPassing","HeadingAccuracy", "Strength")
fifa <- fifa[fifacols]
#histogram of Penalties
hist(fifa$Penalties, main="Histogram of Penalties", xlab="Skill in Penalties", ylab="Frequency", col=barcolors)
#histogram of Aggression
#hist(fifa$Aggression, main="Histogram of Aggression", xlab="Player Aggression Score", ylab="Frequency", #col=barcolors)
#analog correlation matrix
M <- cor(fifa)
M
#graphical correlation matrix
corrplot(M, method="circle")
library(corrplot)
barcolors = c("green", "violet", "orange", "blue", "pink", "red", "yellow", "cyan")
#subset data
fifacols <- c("Penalties", "Aggression","Age", "Stamina","ShotPower","Balance", "BallControl","LongPassing","HeadingAccuracy", "Strength")
fifa <- fifa[fifacols]
#histogram of Penalties
summary(fifa$Penalties)
hist(fifa$Penalties, main="Histogram of Penalties", xlab="Skill in Penalties", ylab="Frequency", col=barcolors)
#analog correlation matrix
M <- cor(fifa)
M
#graphical correlation matrix
corrplot(M, method="circle")
loadPkg("pls")
#Reload data
data <- read.csv("data.csv", check.names = FALSE, stringsAsFactors = FALSE)
#drop NAs
fifa <- na.omit(data)
#keep numeric variables only
fifa <- fifa[, !sapply(fifa, is.character)]
#drop ID variable
fifa <- fifa[, c(-1, -2)]
library(corrplot)
barcolors = c("green", "violet", "orange", "blue", "pink", "red", "yellow", "cyan")
#subset data
fifacols <- c("Penalties", "Aggression","Age", "Stamina","ShotPower","Balance", "BallControl","LongPassing","HeadingAccuracy", "Strength")
fifa <- fifa[fifacols]
#histogram of Penalties
summary(fifa$Penalties)
hist(fifa$Penalties, main="Histogram of Penalties", xlab="Skill in Penalties", ylab="Frequency", col=barcolors)
#analog correlation matrix
M <- cor(fifa)
M
#graphical correlation matrix
corrplot(M, method="circle")
library(corrplot)
barcolors = c("green", "violet", "orange", "blue", "pink", "red", "yellow", "cyan")
#subset data
fifacols <- c("Penalties", "Aggression","Age", "Stamina","ShotPower","Balance", "BallControl","LongPassing","HeadingAccuracy", "Strength")
fifa <- fifa[fifacols]
#histogram of Penalties
summary(fifa$Penalties)
hist(fifa$Penalties, main="Histogram of Penalties", xlab="Skill in Penalties", ylab="Frequency", col=barcolors)
#analog correlation matrix
M <- cor(fifa)
M
#graphical correlation matrix
corrplot(M, method="circle")
library(corrplot)
barcolors = c("green", "violet", "orange", "blue", "pink", "red", "yellow", "cyan")
#subset data
fifacols <- c("Penalties", "Aggression","Age", "Stamina","ShotPower","Balance", "BallControl","LongPassing","HeadingAccuracy", "Strength")
fifa <- fifa[fifacols]
#histogram of Penalties
summary(fifa$Penalties)
sd(fifa$Penalties)
hist(fifa$Penalties, main="Histogram of Penalties", xlab="Skill in Penalties", ylab="Frequency", col=barcolors)
#analog correlation matrix
M <- cor(fifa)
M
#graphical correlation matrix
corrplot(M, method="circle")
library(corrplot)
barcolors = c("green", "violet", "orange", "blue", "pink", "red", "yellow", "cyan")
#subset data
fifacols <- c("Penalties", "Aggression","Age", "Stamina","ShotPower","Balance", "BallControl","LongPassing","HeadingAccuracy", "Strength")
fifa <- fifa[fifacols]
#histogram of Penalties
summary(fifa$Penalties)
sd(fifa$Penalties)
hist(fifa$Penalties, main="Histogram of Penalties", xlab="Skill in Penalties", ylab="Frequency", col=barcolors)
#QQ plot
qqnorm(fifa$Penalties,pch=1, frame=F, main ="Penalties Q-Q Plot", ylab="Penalties Quantiles")
qqline(fifa$Penalties, col="steelblue", lwd=2)
#analog correlation matrix
M <- cor(fifa)
M
#graphical correlation matrix
corrplot(M, method="circle")
library(corrplot)
barcolors = c("green", "violet", "orange", "blue", "pink", "red", "yellow", "cyan")
#subset data
fifacols <- c("Penalties", "Aggression","Age", "Stamina","ShotPower","Balance", "BallControl","LongPassing","HeadingAccuracy", "Strength")
fifa <- fifa[fifacols]
#histogram of Penalties
summary(fifa$Penalties)
sd(fifa$Penalties)
hist(fifa$Penalties, main="Histogram of Penalties", xlab="Skill in Penalties", ylab="Frequency", col=barcolors)
#QQ plot
qqnorm(fifa$Penalties,pch=1, frame=F, main ="Penalties Q-Q Plot", ylab="Penalties Quantiles")
qqline(fifa$Penalties, col="steelblue", lwd=2)
qqnorm(fifa$Aggression,pch=1, frame=F, main ="Penalties Q-Q Plot", ylab="Penalties Quantiles")
qqline(fifa$Aggression, col="steelblue", lwd=2)
#analog correlation matrix
M <- cor(fifa)
M
#graphical correlation matrix
corrplot(M, method="circle")
library(corrplot)
barcolors = c("green", "violet", "orange", "blue", "pink", "red", "yellow", "cyan")
#subset data
fifacols <- c("Penalties", "Aggression","Age", "Stamina","ShotPower","Balance", "BallControl","LongPassing","HeadingAccuracy", "Strength")
fifa <- fifa[fifacols]
#histogram of Penalties
summary(fifa$Penalties)
sd(fifa$Penalties)
hist(fifa$Penalties, main="Histogram of Penalties", xlab="Skill in Penalties", ylab="Frequency", col=barcolors)
#QQ plot
qqnorm(fifa$Penalties,pch=1, frame=F, main ="Penalties Q-Q Plot", ylab="Penalties Quantiles")
qqline(fifa$Penalties, col="steelblue", lwd=2)
qqnorm(fifa$Aggression,pch=1, frame=F, main ="Penalties Q-Q Plot", ylab="Penalties Quantiles")
qqline(fifa$Aggression, col="steelblue", lwd=2)
qqnorm(fifa$Age,pch=1, frame=F, main ="Penalties Q-Q Plot", ylab="Penalties Quantiles")
qqline(fifa$Age, col="steelblue", lwd=2)
#analog correlation matrix
M <- cor(fifa)
M
#graphical correlation matrix
corrplot(M, method="circle")
library(corrplot)
barcolors = c("green", "violet", "orange", "blue", "pink", "red", "yellow", "cyan")
#subset data
fifacols <- c("Penalties", "Aggression","Age", "Stamina","ShotPower","Balance", "BallControl","LongPassing","HeadingAccuracy", "Strength")
fifa <- fifa[fifacols]
#histogram of Penalties
summary(fifa$Penalties)
sd(fifa$Penalties)
hist(fifa$Penalties, main="Histogram of Penalties", xlab="Skill in Penalties", ylab="Frequency", col=barcolors)
#QQ plot
qqnorm(fifa$Penalties,pch=1, frame=F, main ="Penalties Q-Q Plot", ylab="Penalties Quantiles")
qqline(fifa$Penalties, col="steelblue", lwd=2)
qqnorm(fifa$Aggression,pch=1, frame=F, main ="Penalties Q-Q Plot", ylab="Penalties Quantiles")
qqline(fifa$Aggression, col="steelblue", lwd=2)
qqnorm(fifa$Age,pch=1, frame=F, main ="Penalties Q-Q Plot", ylab="Penalties Quantiles")
qqline(fifa$Age, col="steelblue", lwd=2)
qqnorm(fifa$Stamina,pch=1, frame=F, main ="Penalties Q-Q Plot", ylab="Penalties Quantiles")
qqline(fifa$Stamina, col="steelblue", lwd=2)
#analog correlation matrix
M <- cor(fifa)
M
#graphical correlation matrix
corrplot(M, method="circle")
library(corrplot)
barcolors = c("green", "violet", "orange", "blue", "pink", "red", "yellow", "cyan")
#subset data
fifacols <- c("Penalties", "Aggression","Age", "Stamina","ShotPower","Balance", "BallControl","LongPassing","HeadingAccuracy", "Strength")
fifa <- fifa[fifacols]
#histogram of Penalties
summary(fifa$Penalties)
sd(fifa$Penalties)
hist(fifa$Penalties, main="Histogram of Penalties", xlab="Skill in Penalties", ylab="Frequency", col=barcolors)
#QQ plot
qqnorm(fifa$Penalties,pch=1, frame=F, main ="Penalties Q-Q Plot", ylab="Penalties Quantiles")
qqline(fifa$Penalties, col="steelblue", lwd=2)
qqnorm(fifa$Aggression,pch=1, frame=F, main ="Penalties Q-Q Plot", ylab="Penalties Quantiles")
qqline(fifa$Aggression, col="steelblue", lwd=2)
qqnorm(fifa$Age,pch=1, frame=F, main ="Penalties Q-Q Plot", ylab="Penalties Quantiles")
qqline(fifa$Age, col="steelblue", lwd=2)
qqnorm(fifa$Stamina,pch=1, frame=F, main ="Penalties Q-Q Plot", ylab="Penalties Quantiles")
qqline(fifa$Stamina, col="steelblue", lwd=2)
qqnorm(fifa$ShotPower,pch=1, frame=F, main ="Penalties Q-Q Plot", ylab="Penalties Quantiles")
qqline(fifa$ShotPower, col="steelblue", lwd=2)
qqnorm(fifa$ShotPower,pch=1, frame=F, main ="Penalties Q-Q Plot", ylab="Penalties Quantiles")
qqline(fifa$ShotPower, col="steelblue", lwd=2)
qqnorm(fifa$Balance,pch=1, frame=F, main ="Penalties Q-Q Plot", ylab="Penalties Quantiles")
qqline(fifa$Balance, col="steelblue", lwd=2)
qqnorm(fifa$Balance,pch=1, frame=F, main ="Penalties Q-Q Plot", ylab="Penalties Quantiles")
qqline(fifa$Balance, col="steelblue", lwd=2)
shapiro.test(fifa$Penalties)
library(corrplot)
library(nortest)
library(corrplot)
loadPkg("nortest")
barcolors = c("green", "violet", "orange", "blue", "pink", "red", "yellow", "cyan")
#subset data
fifacols <- c("Penalties", "Aggression","Age", "Stamina","ShotPower","Balance", "BallControl","LongPassing","HeadingAccuracy", "Strength")
fifa <- fifa[fifacols]
#histogram of Penalties
summary(fifa$Penalties)
sd(fifa$Penalties)
hist(fifa$Penalties, main="Histogram of Penalties", xlab="Skill in Penalties", ylab="Frequency", col=barcolors)
ad.test(fifa$Penalties)
#analog correlation matrix
M <- cor(fifa)
M
#graphical correlation matrix
corrplot(M, method="circle")
library(corrplot)
library(nortest)
barcolors = c("green", "violet", "orange", "blue", "pink", "red", "yellow", "cyan")
#subset data
fifacols <- c("Penalties", "Aggression","Age", "Stamina","ShotPower","Balance", "BallControl","LongPassing","HeadingAccuracy", "Strength")
fifa <- fifa[fifacols]
#histogram of Penalties
summary(fifa$Penalties)
sd(fifa$Penalties)
hist(fifa$Penalties, main="Histogram of Penalties", xlab="Skill in Penalties", ylab="Frequency", col=barcolors)
#QQ plot
qqnorm(fifa$Penalties,pch=1, frame=F, main ="Penalties Q-Q Plot", ylab="Penalties Quantiles")
qqline(fifa$Penalties, col="steelblue", lwd=2)
#analog correlation matrix
M <- cor(fifa)
M
#graphical correlation matrix
corrplot(M, method="circle")
library(corrplot)
library(nortest)
barcolors = c("green", "violet", "orange", "blue", "pink", "red", "yellow", "cyan")
#subset data
fifacols <- c("Penalties", "Aggression","Age", "Stamina","ShotPower","Balance", "BallControl","LongPassing","HeadingAccuracy", "Strength")
fifa <- fifa[fifacols]
#histogram of Penalties
summary(fifa$Penalties)
sd(fifa$Penalties)
hist(fifa$Penalties, main="Histogram of Penalties", xlab="Skill in Penalties", ylab="Frequency", col=barcolors)
#analog correlation matrix
M <- cor(fifa)
M
#graphical correlation matrix
corrplot(M, method="circle")
#add linear reg, calculate mse
reg <- lm(Penalties ~., data=fifa)
summary(reg)
vif(reg)
loadPkg("car")
#add linear reg, calculate mse
reg <- lm(Penalties ~., data=fifa)
summary(reg)
vif(reg)
mse <- mean(reg$residuals^2)
mse
#check residuals
loadPkg("car")
#add linear reg, calculate mse
reg <- lm(Penalties ~., data=fifa)
summary(reg)
vif(reg)
#check residuals
reg.res <- resid(reg)
hist(reg.res, main="Histogram of Residuals", xlab="Regression Residuals", ylab="Frequency", col=barcolors)
loadPkg("car")
#add linear reg, calculate mse
reg <- lm(Penalties ~., data=fifa)
summary(reg)
vif(reg)
#check residuals
reg.res <- resid(reg)
hist(reg.res, main="Histogram of Residuals", xlab="Regression Residuals", ylab="Frequency", col=barcolors)
loadPkg("car")
#add linear reg, calculate mse
reg <- lm(Penalties ~., data=fifa)
summary(reg)
vif(reg)
reg.res <- resid(reg)
hist(reg.res, main="Histogram of Residuals", xlab="Regression Residuals", ylab="Frequency", col=barcolors)
loadPkg("car")
#add linear reg, calculate mse
reg <- lm(Penalties ~., data=fifa)
summary(reg)
vif(reg)
reg.res <- resid(reg)
loadPkg("car")
#add linear reg, calculate mse
reg <- lm(Penalties ~., data=fifa)
summary(reg)
vif(reg)
reg.res <- resid(reg)
reg.res
loadPkg("car")
barcolors = c("green", "violet", "orange", "blue", "pink", "red", "yellow", "cyan")
#add linear reg, calculate mse
reg <- lm(Penalties ~., data=fifa)
summary(reg)
vif(reg)
reg.res <- resid(reg)
hist(reg.res, main="Histogram of Residuals", xlab="Residuals", ylab="Frequency", col=barcolors)
loadPkg("car")
barcolors = c("green", "violet", "orange", "blue", "pink", "red", "yellow", "cyan")
#add linear reg, calculate mse
reg <- lm(Penalties ~ ., data=fifa)
summary(reg)
vif(reg)
res <- resid(reg)
hist(res, main="Histogram of Residuals", xlab="Residuals", ylab="Frequency", col=barcolors)
loadPkg("car")
barcolors = c("green", "violet", "orange", "blue", "pink", "red", "yellow", "cyan")
#add linear reg, calculate mse
reg <- lm(Penalties ~ ., data=fifa)
summary(reg)
vif(reg)
res <- resid(reg)
hist(res, main="Histogram of Residuals", xlab="Residuals", ylab="Frequency", col=barcolors)
loadPkg("car")
barcolors = c("green", "violet", "orange", "blue", "pink", "red", "yellow", "cyan")
#add linear reg, calculate mse
reg <- lm(Penalties ~ ., data=fifa)
summary(reg)
vif(reg)
reg.res <- resid(reg)
hist(reg.res, main="Histogram of Residuals", xlab="Residuals", ylab="Frequency", col=barcolors)
>>>>>>> c8361b809a8233b66d129de07946b56d659cfbdd
>>>>>>> 42d4cac78199323aaf8300a2d9af202657cd7102
