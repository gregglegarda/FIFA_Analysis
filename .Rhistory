}
#
if(response == "y" | response == "yes"){
dt[as.character(substitute(var))] <- invisible(var_name)
assign(as.character(as.list(match.call())$dt), dt, envir = .GlobalEnv)
cat("Outliers successfully removed", "n")
return(invisible(dt))
} else{
cat("Nothing changed", "n")
return(invisible(var_name))
}
}
knitr::opts_chunk$set(include = F)
options(scientific=T, digits = 3)
# can add quietly=T option to the require() function
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
loadPkg("car")
loadPkg("pls")
loadPkg("corrplot")
library(readr)
fifa <- read_csv("data.csv")
str(fifa)
library(dplyr)
library(ggplot2)
library(maps)
overall_fifa <- fifa %>%
group_by(Nationality) %>%
summarise(Count = n(),
Avg_Overall = mean(Overall),
Avg_Potential = mean(Potential),
Avg_Pot_Diff = mean(Potential-Overall))
worldmap = map_data("world")
merged_fifa <- merge(x = worldmap, y = overall_fifa, by.x = "region", by.y = "Nationality", all.x = TRUE) %>% arrange(order)
ggplot(data = merged_fifa, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = Count)) +
labs(fill='Number of players')
overall_fifa <- fifa %>%
group_by(Nationality) %>%
summarise(Count = n(),
Avg_Overall = mean(Overall),
Avg_Potential = mean(Potential),
Avg_Pot_Diff = mean(Potential-Overall)) %>%
filter(Count > 45)
ggplot(data = merged_fifa, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = Avg_Overall)) +
labs(fill='Average skill')
loadPkg("tidyverse")
loadPkg("ggplot2")
loadPkg("scales")
loadPkg("ggthemes")
# Value of the players
fifa <- read.csv('data.csv')
fifa <- fifa %>%
mutate(cleanvalue = ifelse(str_detect(Value, "K"), 1000, ifelse(str_detect(Value, "M"), 1000000, 1))) %>%
mutate(value = as.numeric(str_extract(Value, "[[:digit:]]+\\.*[[:digit:]]*")) * cleanvalue)
playervalue <- fifa%>%
ggplot(aes(x= value)) +
geom_histogram(color = "white", fill = "darkgrey") +
scale_x_continuous(labels = dollar_format(prefix = "€")) +
ggtitle("Value of the Players") +
theme_economist()
playervalue
# Value of the players after log transformation
playervalue <- fifa%>%
ggplot(aes(y= value)) +
geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=2, notch=FALSE) +
scale_y_log10(labels = dollar_format(prefix = "€")) +
theme_economist()
playervalue
# Group players based on their positions
positions <- unique(fifa$Position)
midfielders <- c("LAM", "CAM", "RAM", "LM", "LCM", "CM", "RCM", "RM", "LDM", "CDM", "RDM")
strikers <- c("LS", "LW", "LF", "ST", "CF", "RF", "RS", "RW")
defenders <- c("LWB", "LB", "CB", "LCB", "RCB", "RB", "RWB")
fifa <- fifa %>%
mutate(PositionGroup = ifelse(Position %in% defenders, "Defenders", ifelse(Position %in% midfielders, "Midfielders", ifelse(Position %in% strikers, "Strikers", "Unknown"))))
# Value of players based on their positions
PositionValue <- fifa %>%
filter(PositionGroup != "Unknown") %>%
ggplot(aes(x= PositionGroup, y= value)) +
geom_boxplot(fill = "darkgrey") +
scale_y_log10(labels = dollar_format(prefix = "€")) +
ggtitle("Player's Value based on Positions", subtitle = "Strikers have more value than Midfielders and Defenders") +
theme_economist()
PositionValue
# Select Strikers from all players
fifastrikers <- fifa %>%
filter(PositionGroup == "Strikers")
skills_names <- c("Crossing", "Finishing", "HeadingAccuracy", "ShortPassing", "Volleys", "Dribbling", "Curve", "FKAccuracy", "LongPassing", "BallControl", "Acceleration", "SprintSpeed", "Agility", "Reactions", "Balance", "ShotPower", "Jumping", "Stamina", "Strength", "LongShots", "Aggression", "Interceptions", "Positioning", "Vision", "Penalties", "Composure", "Marking", "StandingTackle", "SlidingTackle")
# Ploting the skills of strikers
fifa_aplayers <- na.omit(fifastrikers[c("Position", skills_names, "Value")])
fifa_aplayers %>%
gather(Skills, value, 2:30) %>%
ggplot(aes(x=value, fill=Skills)) +
geom_histogram(colour="black", show.legend=FALSE) +
facet_wrap(~Skills, scales="free_x") +
labs(x="Scores", y="Frequency",
title="Skills - Histograms") +
theme_bw()
# Ploting the skills of strikers
fifa_aplayers %>%
gather(Skills, values, 2:30) %>%
ggplot(aes(x=reorder(Skills, values, FUN=median), y=values, fill=Skills)) +
geom_boxplot(show.legend=FALSE) +
labs(title="Skills - Boxplots") +
theme_bw() +
theme(axis.title.y=element_blank(),
axis.title.x=element_blank()) +
coord_flip()
# See if there are correlations between skills. If there are correlations, we can perform PCA and K-means clusteing
loadPkg("corrplot")
corrplot(cor(fifa_aplayers[2:30]), type="upper", method="ellipse", tl.cex=0.9)
# scale the skills
nfifa_skills <- as.data.frame(scale(fifa_aplayers[2:30]))
# Identifiy how many cluster should we keep
loadPkg("gridExtra")
bss <- numeric()
wss <- numeric()
set.seed(1234)
for(i in 1:10){
bss[i] <- kmeans(nfifa_skills, centers=i)$betweenss
wss[i] <- kmeans(nfifa_skills, centers=i)$tot.withinss
}
p1 <- qplot(1:10, bss, geom=c("point", "line"),
xlab="Number of clusters", ylab="Between-cluster sum of squares") +
scale_x_continuous(breaks=seq(0, 10, 1)) +
theme_bw()
p2 <- qplot(1:10, wss, geom=c("point", "line"),
xlab="Number of clusters", ylab="Total within-cluster sum of squares") +
scale_x_continuous(breaks=seq(0, 10, 1)) +
theme_bw()
grid.arrange(p1, p2, ncol=2)
# K-means clustering analysis of skills
set.seed(1234)
nfifa_skills_k4 <- kmeans(nfifa_skills, centers=4)
str(nfifa_skills_k4)
nfifa_skills_k4
loadPkg("factoextra")
fviz_cluster(nfifa_skills_k4, data = nfifa_skills) # 4 clusters identified
loadPkg("GGally")
# Because there are too many skills, here we only select 6 skills to show their loading in each cluster
ggpairs(cbind(nfifa_skills, Cluster=as.factor(nfifa_skills_k4$cluster)),
columns=1:6, aes(colour=Cluster, alpha=0.5),
lower=list(continuous="points"),
upper=list(continuous="blank"),
axisLabels="none", switch="both") +
theme_bw()
# In addition to the K-means clustering, we also conducted PCA
mps.pr.out =prcomp(nfifa_skills, scale =TRUE)
summary(mps.pr.out)
mps.pr.out$rotation
plot(mps.pr.out, type="l") # Identify how many components should we use in the next several graphs
mps.pr.var <- (mps.pr.out$sdev^2)
mps.pve <- mps.pr.var/sum(mps.pr.var)
plot(cumsum(mps.pve), xlab="Principal Component (standardized)", ylab ="Cumulative Proportion of Variance Explained",ylim=c(0,1),type="b")
loadPkg("FactoMineR")
loadPkg("factoextra")
PCA(nfifa_skills, ncp = 4, graph = TRUE)
res.mp.pca <- PCA(nfifa_skills, graph = FALSE)
fviz_eig(res.mp.pca, addlabels = TRUE, ylim = c(0, 40))
# Visualize the PCA reult
fviz_pca_var(res.mp.pca, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
var <- get_pca_var(res.mp.pca)
corrplot(var$contrib, is.corr=FALSE)
fviz_contrib(res.mp.pca, choice = "var", axes = 1, top = 10)
fviz_contrib(res.mp.pca, choice = "var", axes = 2, top = 10)
fviz_contrib(res.mp.pca, choice = "var", axes = 3, top = 10)
fviz_contrib(res.mp.pca, choice = "var", axes = 4, top = 10)
#Reload data
data <- read.csv("data.csv", check.names = FALSE, stringsAsFactors = FALSE)
#drop NAs
fifa <- na.omit(data)
#keep numeric variables only
fifa <- fifa[, !sapply(fifa, is.character)]
#drop ID variable
fifa <- fifa[, c(-1, -2)]
barcolors = c("green", "violet", "orange", "blue", "pink", "red", "yellow", "cyan")
#subset data
fifacols <- c("Penalties", "Aggression","Age", "Stamina","ShotPower","Balance", "BallControl","LongPassing","HeadingAccuracy", "Strength")
fifa <- fifa[fifacols]
#histogram of Penalties
summary(fifa$Penalties)
sd(fifa$Penalties)
hist(fifa$Penalties, main="Histogram of Penalties", xlab="Skill in Penalties", ylab="Frequency", col=barcolors)
#summary correlation matrix
M <- cor(fifa)
M
#graphical correlation matrix
corrplot(M, method="circle")
barcolors = c("green", "violet", "orange", "blue", "pink", "red", "yellow", "cyan")
#add linear reg, calculate mse
reg <- lm(Penalties ~ ., data=fifa)
summary(reg)
vif(reg)
reg.res <- resid(reg)
hist(reg.res, main="Histogram of Residuals", xlab="Residuals", ylab="Frequency", col=barcolors)
barcolors = c("green", "violet", "orange", "blue", "pink", "red", "yellow", "cyan")
#scale data
prscale <- prcomp(fifa, scale=TRUE)
#summary of scaled data
summary(prscale)
plot(prscale, main="PCA", type = "l", col=barcolors)
loadPkg("pls")
#PCR on training data using CV
smp_size <- floor(0.80 *nrow(fifa))
set.seed(2)
train_ind <- sample(seq_len(nrow(fifa)), size=smp_size)
fifa.train <- fifa[train_ind, ]
fifa.test <- fifa[-train_ind,]
y.test <- fifa.test[,1]
pcr.fit = pcr(Penalties ~., data=fifa.train, scale=TRUE, validation="CV")
summary(pcr.fit)
#plot validation
validationplot(pcr.fit, val.type="MSEP")
#calculate MSE
pcr.pred <- predict(pcr.fit, fifa.test, ncomp = 6)
#linear regression MSE
print("---------MSE Linear Regression---------")
mse <- mean(reg$residuals^2)
mse
print("---------MSE PCR ---------")
(mean((pcr.pred - y.test)^2))
#fit model
pcr.fit2 <- pcr(Penalties ~.,data=fifa, scale=TRUE, ncomp=6)
summary(pcr.fit2)
#show predicted values vs observed
predplot(pcr.fit2, main="Penalties Prediction Vs Penalties Observed")
loadPkg("readr")
loadPkg("stringr")
loadPkg("gsubfn")
loadPkg("car")
loadPkg("relaimpo")
data <- read_csv("data.csv")
#View(data)
str(data)
numextract <- function(string){str_extract(string, "\\-*\\d+\\.*\\d*")}
#Weight
data$Weight <- as.integer(numextract(data$Weight))
#Height
data$Height <- as.numeric(gsubfn("(\\d)'(\\d+)", ~ as.numeric(x) * 30.48 +
as.numeric(y) * 2.54, sub('"', '', data$Height)))
data$Height <- as.integer(data$Height)
gk<- subset(data,Position=="GK")
gk <- gk[,colSums(is.na(gk))<nrow(gk)]
gk
hist(gk$Potential,main="Histogram for goalkeepers' potential ratings", xlab="rating", col="orange")
qqnorm(gk$Potential, main = "GK's potential ratings Q-Q plot", ylab="rating quantiles", col=c("#ff0000","#00ff00","#0000ff","#ffff00"))
qqline(gk$Potential)
scatterplot(gk$Age, gk$Overall, col = "red", xlab = "Age", ylab = "Current Rating",main = "Current Rating vs. Age")
scatterplot(gk$Age, gk$Potential, col = "dark green", xlab = "Age", ylab = "Potential Rating",main = "Potential Rating vs. Age")
fit1 <- lm(Potential ~ Age + Height + Weight + Reactions+ Jumping+ GKDiving + GKHandling + GKKicking + GKPositioning + GKReflexes , data = gk)
summary(fit1)
fit1
plot(fit1, col=c("#ff0000","#00ff00","#0000ff","#ffff00"))
# Calculate Relative Importance for Each Predictor
calc.relimp(fit1, type = c("lmg"), rela=TRUE)
# Bootstrap Measures of Relative Importance (1000 samples)
boot <- boot.relimp(fit1, b = 1000, rank = TRUE,
diff = TRUE, rela = TRUE)
plot(booteval.relimp(boot,sort=TRUE)) # plot result
## reading data
data <- read.csv("data.csv", check.names = FALSE, stringsAsFactors = FALSE)
## naming rows
wage_skills <- c("Wage","Crossing", "Finishing", "HeadingAccuracy", "ShortPassing", "Volleys", "Dribbling", "Curve", "FKAccuracy", "LongPassing", "BallControl", "Acceleration", "SprintSpeed", "Agility", "Reactions", "Balance", "ShotPower", "Jumping", "Stamina", "Strength", "LongShots", "Aggression", "Interceptions", "Positioning", "Vision", "Penalties", "Composure", "Marking", "StandingTackle", "SlidingTackle", "GKDiving", "GKHandling", "GKKicking", "GKPositioning", "GKReflexes")
value_skills <- c("Value", "Crossing", "Finishing", "HeadingAccuracy", "ShortPassing", "Volleys", "Dribbling", "Curve", "FKAccuracy", "LongPassing", "BallControl", "Acceleration", "SprintSpeed", "Agility", "Reactions", "Balance", "ShotPower", "Jumping", "Stamina", "Strength", "LongShots", "Aggression", "Interceptions", "Positioning", "Vision", "Penalties", "Composure", "Marking", "StandingTackle", "SlidingTackle", "GKDiving", "GKHandling", "GKKicking", "GKPositioning", "GKReflexes")
wage_value <- c("Value","Wage")
####CLEAN DATA (Wage and Value having same range. remove M and K and period)
#clean data (Removing Pound Sign)
loadPkg('stringr')
data_wage_skills <- na.omit(data[c(wage_skills)])
data_value_skills <- na.omit(data[c(value_skills)])
data_wage_skills$Wage <- str_replace(
data_wage_skills$Wage, # column we want to search
pattern = '[€]', # what to find
replacement = '' # what to replace it with
)
data_value_skills$Value <- str_replace(
data_value_skills$Value, # column we want to search
pattern = '[€]', # what to find
replacement = '' # what to replace it with
)
####Start of Wage Cleanup
data_wage_skills$WageM <- str_replace(
data_wage_skills$Wage, # column we want to search
pattern = 'M', # what to find
replacement = '' # what to replace it with
)
data_wage_skills$WageK <- str_replace(
data_wage_skills$Wage, # column we want to search
pattern = 'K', # what to find
replacement = '' # what to replace it with
)
data_wage_skills$WageMM <- rep(0, length(data_wage_skills$WageM))
data_wage_skills$WageKK <- rep(0, length(data_wage_skills$WageK))
non_alphaM <-grep("[[:alpha:]]",data_wage_skills$WageM, invert = TRUE)
data_wage_skills$WageMM[non_alphaM] <- data_wage_skills$WageM[non_alphaM]
non_alphaK <-grep("[[:alpha:]]",data_wage_skills$WageK, invert = TRUE)
data_wage_skills$WageKK[non_alphaK] <- data_wage_skills$WageK[non_alphaK]
data_wage_skills$WageMM <- as.numeric(data_wage_skills$WageMM)*1000000
data_wage_skills$WageKK <- as.numeric(data_wage_skills$WageKK)*1000
data_wage_skills$Wage <- data_wage_skills$WageMM + data_wage_skills$WageKK
#### End of Wage CLeanup
#### Start of ValueCleanup
data_value_skills$ValueM <- str_replace(
data_value_skills$Value, # column we want to search
pattern = 'M', # what to find
replacement = '' # what to replace it with
)
data_value_skills$ValueK <- str_replace(
data_value_skills$Value, # column we want to search
pattern = 'K', # what to find
replacement = '' # what to replace it with
)
data_value_skills$ValueMM <- rep(0, length(data_value_skills$ValueM))
data_value_skills$ValueKK <- rep(0, length(data_value_skills$ValueK))
non_alphaVM <-grep("[[:alpha:]]",data_value_skills$ValueM, invert = TRUE)
data_value_skills$ValueMM[non_alphaVM] <- data_value_skills$ValueM[non_alphaVM]
non_alphaVK <-grep("[[:alpha:]]",data_value_skills$ValueK, invert = TRUE)
data_value_skills$ValueKK[non_alphaVK] <- data_value_skills$ValueK[non_alphaVK]
data_value_skills$ValueMM <- as.numeric(data_value_skills$ValueMM)*1000000
data_value_skills$ValueKK <- as.numeric(data_value_skills$ValueKK)*1000
data_value_skills$Value <- data_value_skills$ValueMM + data_value_skills$ValueKK
#### End of Value Cleanup
#More cleanup and formatting
data_wage_skills <- na.omit(data_wage_skills[c(wage_skills)])
data_value_skills <- na.omit(data_value_skills[c(value_skills)])
data_wage_skills[2:35] <- lapply(data_wage_skills[2:35], as.numeric)
data_value_skills[2:35] <- lapply(data_value_skills[2:35], as.numeric)
wage_value$Wage <- data_wage_skills$Wage
wage_value$Value <- data_value_skills$Value
# take log individually
data_wage_skills$Wage < - log(data_wage_skills$Wage)
data_value_skills$Value < - log(data_value_skills$Value)
wage_value$Wage <-log(wage_value$Wage)
wage_value$Value <- log(wage_value$Value)
data_wage_skills$Wage < - log(data_wage_skills$Wage)
data_value_skills$Value < - log(data_value_skills$Value)
wage_value$Wage <-log(wage_value$Wage)
wage_value$Value <- log(wage_value$Value)
# # remove outliers
# outlierKD(data_value_skills, Value, 'y')
# summary(data_value_skills$Value)
#
# outlierKD(data_wage_skills, Wage, 'y')
# summary(data_wage_skills$Wage)
#
# outlierKD(wage_value, Wage, 'y')
# summary(wage_value$Wage)
# outlierKD(wage_value, Value, 'y')
# summary(wage_value$Value)
#Check to view the structure of the datasets
str(data_wage_skills)
str(data_value_skills)
hist(wage_value$Wage, xlab = "Wage", main = "Histogram of Wage", col="cornsilk3")
hist(wage_value$Value, xlab = "Value", main = "Histogram of Value", col = "cornsilk2")
#qqnorm(wage_value$Wage, main = "Wage Q-Q plot")
#qqline(wage_value$Wage, col = "red")
#qqnorm(wage_value$Value, main = "Value Q-Q plot")
#qqline(wage_value$Value, col = "blue")
#Perform Regression for Wage vs Skills
wage_lm <- lm(Wage ~ ., data = data_wage_skills)
summary(wage_lm)
#Perform Regression for Values vs Skills
value_lm <- lm(Value ~ ., data = data_value_skills)
summary(value_lm)
#### PLOT OF RESIDUALS
#Wage residuals
plot(wage_lm)
#Wage residuals
plot(value_lm)
#Perforsm VIF for Wage vs Skills Linear Model
vif(wage_lm)
#Perforsm VIF for Value vs Skills Linear Model
vif(value_lm)
#boxplot(wage_value)
#plot(wage_value$Wage, wage_value$Value, xlab = "Wage", ylab = "Value")
loadPkg("corrplot")
## corrplot 0.84 loaded
#M <- cor(wage_value$Wage,wage_value$Value)
#corrplot.mixed(M, method = "circle")
#resid(wage_lm)
#resid(value_lm)
#PCA_wage_skills_C <- prcomp(data_wage_skills, center = TRUE,scale. = TRUE) #center
#PCA_wage_skills_R <- prcomp(data_wage_skills, center = TRUE,scale. = FALSE) #raw
#summary(PCA_wage_skills_C)
#summary(PCA_wage_skills_R)
#PCA_value_skills_C <- prcomp(data_value_skills, center = TRUE,scale. = TRUE) #center
#PCA_value_skills_R <- prcomp(data_value_skills, center = TRUE,scale. = FALSE) #raw
#summary(PCA_value_skills_C)
#summary(PCA_value_skills_R)
#import data
fifaOri <- read.csv("data.csv")
#fifaOri <- select(Dataa, Age, Overall, Wage, Preferred.Foot, Position, Height, Weight)
str(fifaOri)
#clean data
#wage
library(stringr)
numextract <- function(string){
str_extract(string, "\\-*\\d+\\.*\\d*")
}
fifaOri$Wage <- as.integer(numextract(fifaOri$Wage))
fifaOri$Wage_dummy <- as.factor(ifelse(fifaOri$Wage > 99, 1, 0))
#Foot - cleaned
y <- as.factor(fifaOri$Preferred.Foot)
levels(y) <- list(Left  = c("Left"),
Right = c("Right"))
fifaOri <- mutate(fifaOri, Preferred.Foot = y)
#age - cleaned
#skill - cleaned
#Weight
fifaOri$Weight <- as.integer(numextract(fifaOri$Weight))
#Height
library(gsubfn)
fifaOri$Height <- as.numeric(gsubfn("(\\d)'(\\d+)", ~ as.numeric(x) * 30.48 +
as.numeric(y) * 2.54, sub('"', '', fifaOri$Height)))
fifaOri$Height <- as.integer(fifaOri$Height)
#position
x <- as.factor(fifaOri$Position)
levels(x) <- list(GK  = c("GK"),
DEF = c("LWB", "LB", "CB", "RB", "RWB", "LCB", "RCB"),
MID = c("CM", "LDM", "LAM", "RDM", "RAM", "CDM", "CAM", "LM", "RM", "LCM", "RCM"),
FWD = c("CF", "ST", "LW", "RW", "LF", "RF", "LS", "RS"))
fifaOri <- mutate(fifaOri, Position = x)
#Region
#library(countrycode)
#fifa$Nationality <- as.factor(fifa$Nationality)
#fifa$region <- as.factor(countrycode(sourcevar = fifa[, "Nationality"],
#  origin = "country.name",
# destination = "continent"))
#fifa <- mutate(fifa, Position = x)
fifaQQ <- fifaOri
par(mfrow=c(2,2))
qqnorm(fifaQQ$Age, main = "Age Q-Q plot", ylab="Age quantiles")
qqline(fifaQQ$Age, col = "red")
qqnorm(fifaQQ$Overall, main = "Skill level Q-Q plot", ylab="Skill level quantiles")
qqline(fifaQQ$Overall, col = "red")
qqnorm(fifaQQ$Height, main = "Height Q-Q plot", ylab="Height quantiles")
qqline(fifaQQ$Height, col = "red")
qqnorm(fifaQQ$Weight, main = "Weight Q-Q plot", ylab="Weight quantiles")
qqline(fifaQQ$Weight, col = "red")
#Create a function to eliminate outliners.
outlierKD <- function(dt, var, rmv=NULL) {
var_name <- eval(substitute(var),eval(dt))
na1 <- sum(is.na(var_name))
m1 <- mean(var_name, na.rm = T)
sd1 <- sd(var_name,na.rm = T)
par(mfrow=c(2, 2), oma=c(0,0,3,0))
boxplot(var_name, main="With outliers")
hist(var_name, main="With outliers", xlab=NA, ylab=NA)
outlier <- boxplot.stats(var_name)$out
mo <- mean(outlier)
var_name <- ifelse(var_name %in% outlier, NA, var_name)
boxplot(var_name, main="Without outliers")
hist(var_name, main="Without outliers", xlab=NA, ylab=NA)
title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(var_name))
cat("Outliers identified:", na2 - na1, "n")
cat("Propotion (%) of outliers:", round((na2 - na1) / sum(!is.na(var_name))*100, 1), "n")
cat("Mean of the outliers:", round(mo, 2), "n")
m2 <- mean(var_name, na.rm = T)
cat("Mean without removing outliers:", round(m1, 2), "n")
cat("Mean if we remove outliers:", round(m2, 2), "n")
#
if(is.null(rmv)) {
response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
} else {
if (rmv=='y'|rmv=='yes'|rmv=='Y'|rmv=='Yes'|rmv=='YES'|rmv==TRUE ) { response = 'y' } else { response = 'n' }
}
#
if(response == "y" | response == "yes"){
dt[as.character(substitute(var))] <- invisible(var_name)
assign(as.character(as.list(match.call())$dt), dt, envir = .GlobalEnv)
cat("Outliers successfully removed", "n")
return(invisible(dt))
} else{
cat("Nothing changed", "n")
return(invisible(var_name))
}
}
outlierKD(fifaQQ, Age,'y') #Eliminate outliers.
outlierKD(fifaQQ, Overall,'y') #Eliminate outliers.
outlierKD(fifaQQ, Weight,'y') #Eliminate outliers.
outlierKD(fifaQQ, Height,'y') #Eliminate outliers.
fifaNew <- na.omit(fifaQQ) #Eliminate NAs
summary(fifaNew) #Check the summary statistics of fifa
str(fifaNew)
par(mfrow=c(2,2))
qqnorm(fifaNew$Age, main = "Age Q-Q plot", ylab="Age quantiles")
qqline(fifaNew$Age, col = "red")
qqnorm(fifaNew$Overall, main = "Skill level Q-Q plot", ylab="Skill level quantiles")
qqline(fifaNew$Overall, col = "red")
qqnorm(fifaNew$Height, main = "Height Q-Q plot", ylab="Height quantiles")
qqline(fifaNew$Height, col = "red")
qqnorm(fifaNew$Weight, main = "Weight Q-Q plot", ylab="Weight quantiles")
qqline(fifaNew$Weight, col = "red")
wageLogit <- glm(Wage_dummy ~ Age + Preferred.Foot + Overall + Position + Weight + Height , data = fifaNew, family = "binomial")
summary(wageLogit)
library(pROC) # receiver operating characteristic curve, gives the diagnostic ability of a binary classifier system as its discrimination threshold is varied. The curve is on sensitivity/recall/true-positive-rate vs false_alarm/false-positive-rate/fall-out.
prob=predict(wageLogit, type = c("response"))
fifaNew$prob=prob
h <- roc(Wage_dummy~prob, data=fifaNew)
auc(h) # area-under-curve prefer 0.8 or higher.
plot(h)
# detach("package:pROC", unload = T) # good habit to remove unload packages no longer needed
library(pscl) # use pR2( ) function to calculate McFadden statistics for model eval
wageLogitpr2 = pR2(wageLogit)
wageLogitpr2
# detach("package:pscl", unload = T) # good habit to remove unload packages no longer needed
